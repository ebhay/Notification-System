# Notification Service with RabbitMQ

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A Node.js-based notification service that demonstrates asynchronous processing using RabbitMQ and data persistence with MongoDB.

## Overview

This service sends email, SMS, and in-app notifications. It leverages RabbitMQ for queueing and MongoDB for storing notifications.

## Prerequisites

- Node.js (>= 18)
- npm
- MongoDB (must be running locally or remotely)
- RabbitMQ (must be running with the Management Plugin enabled)

## Setup

1. **Clone the Repository**
   ```bash
   git clone <your_repository_url>
   cd notification-service
   ```

2. **Install Dependencies**
   ```bash
   npm install
   cd queue
   npm install amqplib dotenv mongoose
   cd ..
   ```

3. **Configure Environment Variables**
   Create a `.env` file in the root directory with the following:
   ```env
   PORT=5000
   MONGODB_URI=mongodb://localhost:27017/notificationsDB
   RABBITMQ_URL=amqp://guest:guest@localhost:5672
   ```

## Running the Application

1. **Start the API Server (Terminal 1)**
   ```bash
   node server.js
   ```

2. **Start the RabbitMQ Consumer (Terminal 2)**
   ```bash
   node queue/consumer.js
   ```

## Testing with Postman

Use the following collection to test the endpoints:

### Endpoints

- **Send Email Notification**
  - **Method:** POST  
  - **URL:** `http://localhost:5000/notifications`  
  - **Body:**
    ```json
    {
      "userId": "testUser",
      "type": "email",
      "subject": "Test Email",
      "message": "This is a test email notification."
    }
    ```

- **Send SMS Notification**
  - **Method:** POST  
  - **URL:** `http://localhost:5000/notifications`  
  - **Body:**
    ```json
    {
      "userId": "testUser",
      "type": "sms",
      "message": "This is a test SMS notification."
    }
    ```

- **Send In-App Notification**
  - **Method:** POST  
  - **URL:** `http://localhost:5000/notifications`  
  - **Body:**
    ```json
    {
      "userId": "testUser",
      "type": "inapp",
      "message": "This is a test in-app notification."
    }
    ```

- **Get Notifications for a User**
  - **Method:** GET  
  - **URL:** `http://localhost:5000/users/testUser/notifications`

### Steps

1. Start both the API server and consumer.
2. Import the endpoints above into Postman or use the provided JSON collection (replace `YOUR_POSTMAN_ID_HERE` if needed).
3. Send POST requests to trigger different types of notifications.
4. Observe the console logs in both terminals.
5. Use the GET request to verify notification storage in MongoDB.

## Monitoring

- Access the RabbitMQ dashboard at:  
  [http://localhost:15672](http://localhost:15672)  
  Default credentials: `guest` / `guest`

## Notes

- In production, use secure RabbitMQ credentials.
- Middleware only simulates notification deliveryâ€”implement actual email/SMS/in-app logic in the `middleware/` folder.
- Consider adding robust error handling, logging, and retry mechanisms.

---

MIT License
